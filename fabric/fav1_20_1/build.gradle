import net.fabricmc.loom.task.RemapJarTask

plugins {
  alias(libs.plugins.shadow)
  alias(libs.plugins.loom)
}

configurations {
  shadowImpl
  compileOnly.extendsFrom shadowImpl
  implementation.extendsFrom shadowImpl2
}

dependencies {
  minecraft 'com.mojang:minecraft:1.20.1'
  mappings 'net.fabricmc:yarn:1.20.1+build.3:v2'
  modImplementation 'net.fabricmc:fabric-loader:0.14.11'
  modImplementation 'net.fabricmc.fabric-api:fabric-api:0.91.1+1.20.1'
  compileOnly project(':fabric:favcore')
  shadowImpl2 project(':common')
}

build {
  dependsOn(':common:build')
  dependsOn(':fabric:favcore:build')
}

processResources {
  from("$rootDir/fabric/src/main/resources") {
    include '**/*'
  }
  filesMatching('**/fabric.mod.json') {
    expand(
      project: project,
      projectName: project.name,
      projectVersion: project.version,
      projectDescription: project.property('description'),
      projectGroup: project.group,
      projectHP: project.property('hp'),
      projectSource: project.property('source')
    )
  }
}

shadowJar {
  configurations = [project.configurations.shadowImpl]
  archiveBaseName.set('Kishax-Fabric')
  archiveClassifier.set('')
  archiveVersion.set('1.20.1-shaded')
  from(project(':fabric:favcore').sourceSets.main.output)
  dependencies {
    exclude(dependency('com.google.guava:.*'))
      exclude(dependency('org.slf4j:slf4j-simple'))
      exclude(dependency('org.apache.logging.log4j:log4j-slf4j2-impl'))
  }
  exclude('/mappings/*')
  exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task remappedShadowJar(type: RemapJarTask) {
    dependsOn tasks.shadowJar
    input.set(tasks.shadowJar.archiveFile.get().asFile)
    inputFile.set(tasks.shadowJar.archiveFile.get().asFile)
    archiveFileName.set('Kishax-Fabric-1.20.1-remapped.jar')
}

tasks.assemble.dependsOn tasks.remappedShadowJar

artifacts {
  archives remappedShadowJar
  shadow shadowJar
}
