plugins {
  alias(libs.plugins.shadow)
  alias(libs.plugins.neoforgemoddev)
}

java {
  modularity.inferModulePath.set(true)
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
  sourceCompatibility = 17
  targetCompatibility = 21
}

configurations {
  shadowImpl
  compileOnly.extendsFrom shadowImpl
  implementation.extendsFrom shadowImpl2
}

neoForge {
  version = '21.1.93'
  validateAccessTransformers = true

  parchment {
    mappingsVersion = '2024.11.13'
    minecraftVersion = '1.21.1'
  }

  mods {
    "kishax" {
      sourceSet(sourceSets.main)
    }
  }
}

dependencies {
  compileOnly project(':neoforge:neofovcore')
  shadowImpl2 project(':common')
  shadowImpl('com.google.code.gson:gson:2.11.0') {
    version { strictly '2.11.0' }
  }
}

build {
  dependsOn shadowJar
  dependsOn(':common:build')
  dependsOn(':neoforge:neofovcore:build')
}

shadowJar {
  configurations = [project.configurations.shadowImpl, project.configurations.shadowImpl2]
  archiveBaseName.set('Kishax-NeoForge')
  archiveClassifier.set('')
  archiveVersion.set('1.21.1')
  from(project(':neoforge:neofovcore').sourceSets.main.output)

  exclude('/mappings/*')
  exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  relocate('com.google', 'net.kishax.mc.lib.google')
  relocate('kotlin', 'net.kishax.mc.lib.kotlin')
  relocate('okhttp3', 'net.kishax.mc.lib.okhttp3')
  relocate('okio', 'net.kishax.mc.lib.okio')
  relocate('org.aopalliance', 'net.kishax.mc.lib.aopalliance')
  relocate('org.apache', 'net.kishax.mc.lib.apache')
  relocate('org.checkerframework', 'net.kishax.mc.lib.checkerframework')
  relocate('org.intellij', 'net.kishax.mc.lib.intellij')
  relocate('org.jetbrains', 'net.kishax.mc.lib.jetbrains')
  relocate('org.json', 'net.kishax.mc.lib.json')
  exclude('org/slf4j/**') // using slf4j pkg by other mods' export one
  exclude('javax/annotation/**') // in the same way
  exclude('javax/annotation') // in the same way
  relocate('org.yaml', 'net.kishax.mc.lib.yaml')
  relocate('redis', 'net.kishax.mc.lib.redis')

  destinationDirectory.set(file("$buildDir/libs"))
}

processResources {
  from("$rootDir/neoforge/src/main/resources") {
    include '**/*'
  }
  filesMatching('META-INF/neoforge.mods.toml') {
    expand(
      project: project,
      projectName: project.name,
      projectVersion: project.version,
      projectDescription: project.property('description'),
      projectGroup: project.group,
      groupId: project.group,
      projectHP: project.property('hp'),
      projectSource: project.property('source'),
      projectIssueTracker: project.property('issue')
    )
  }
}

artifacts {
  shadow shadowJar
}
