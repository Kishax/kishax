plugins {
  alias(libs.plugins.shadow)
  alias(libs.plugins.forgegradle)
  alias(libs.plugins.parchment)
}

java {
    modularity.inferModulePath.set(true)
    toolchain {
      languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = 21
    targetCompatibility = 21
}

configurations {
  shadowImpl
  compileOnly.extendsFrom shadowImpl
  implementation.extendsFrom shadowImpl2
}

minecraft {
  mappings channel: 'parchment', version: '2024.11.17-1.21.1'
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.21.1-52.0.40'
  implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
  compileOnly project(':forge:fovcore')
  shadowImpl2 project(':common')
}

build {
  dependsOn ':common:build', ':forge:fovcore:build'
}

shadowJar {
  configurations = [project.configurations.shadowImpl, project.configurations.shadowImpl2]
  archiveBaseName.set('Kishax-Forge')
  archiveClassifier.set('')
  archiveVersion.set('1.21.1-reobfed')
  from(project(':forge:fovcore').sourceSets.main.output)
  exclude('/mappings/*')
  exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')

  relocate('com.google', 'net.kishax.mc.lib.google')
  relocate('kotlin', 'net.kishax.mc.lib.kotlin')
  relocate('okhttp3', 'net.kishax.mc.lib.okhttp3')
  relocate('okio', 'net.kishax.mc.lib.okio')
  relocate('org.aopalliance', 'net.kishax.mc.lib.aopalliance')
  relocate('org.apache', 'net.kishax.mc.lib.apache')
  relocate('org.checkerframework', 'net.kishax.mc.lib.checkerframework')
  relocate('org.intellij', 'net.kishax.mc.lib.intellij')
  relocate('org.jetbrains', 'net.kishax.mc.lib.jetbrains')
  relocate('org.json', 'net.kishax.mc.lib.json')
  exclude('org/slf4j/**') // using slf4j pkg by other mods' export one
  exclude('javax/annotation/**') // in the same way
  exclude('javax/annotation') // in the same way
  relocate('org.yaml', 'net.kishax.mc.lib.yaml')
  relocate('redis', 'net.kishax.mc.lib.redis')
}

processResources {
  from("$rootDir/forge/src/main/resources") {
    include '**/*'
  }
  filesMatching('META-INF/mods.toml') {
    expand(
      project: project,
      projectName: project.name,
      projectVersion: project.version,
      projectDescription: project.property('description'),
      projectGroup: project.group,
      groupId: project.group,
      projectHP: project.property('hp'),
      projectSource: project.property('source'),
      projectIssueTracker: project.property('issue')
    )
  }
  filesMatching('**/pack.mcmeta') {
    expand(
      projectPackMCMeta: 16
    )
  }
}

reobf {
  shadowJar {
    dependsOn shadowJar
  }
}

artifacts {
  shadow shadowJar
}
