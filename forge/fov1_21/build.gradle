plugins {
	alias(libs.plugins.shadow)
	alias(libs.plugins.forgegradle)
	alias(libs.plugins.parchment)
}

sourceCompatibility = 17
targetCompatibility = 21

configurations {
	shadowImpl
	compileOnly.extendsFrom shadowImpl
}

minecraft {
	mappings channel: 'parchment', version: '2024.11.10-1.21'
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.21-51.0.32'
	implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }
	compileOnly project(':forge:fovcore')
	shadowImpl project(':common')
}

build {
	dependsOn(':common:build')
    dependsOn(':forge:fovcore:build')
}

shadowJar {
	configurations = [project.configurations.shadowImpl]
	archiveBaseName.set('FMC-Forge')
	archiveClassifier.set('')
	archiveVersion.set('1.21-shaded')
    from(project(':forge:fovcore').sourceSets.main.output)
	dependencies {
		exclude(dependency('com.google.guava:.*'))
		exclude(dependency('org.slf4j:slf4j-simple'))
		exclude(dependency('org.apache.logging.log4j:log4j-slf4j2-impl'))
		exclude(dependency('com.google.code.gson:gson'))
		exclude(dependency('org.slf4j:slf4j-api'))
	}
    exclude('/mappings/*')
	exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

processResources {
    from("$rootDir/forge/src/main/resources") {
        include '**/*'
    }
	filesMatching('META-INF/mods.toml') {
		expand(
            project: project,
            projectName: project.name,
            projectVersion: project.version,
            projectDescription: project.property('description'),
            projectGroup: project.group,
            groupId: project.group,
            projectHP: project.property('hp'),
            projectSource: project.property('source'),
			projectIssueTracker: project.property('issue')
        )
	}
	filesMatching('**/pack.mcmeta') {
		expand(
			projectPackMCMeta: 15
		)
	}
}

reobf {
    shadowJar {
		dependsOn shadowJar
		doLast {
			def reobfJar = file("${buildDir}/libs/FMC-Forge-1.21-shaded.jar")
			def renamedJar = file("${buildDir}/libs/FMC-Forge-1.21-reobfed.jar")
			if (reobfJar.exists()) {
			    reobfJar.renameTo(renamedJar)
			}
        }
    }
}

artifacts {
	shadow shadowJar
}
