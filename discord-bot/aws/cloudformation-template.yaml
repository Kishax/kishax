AWSTemplateFormatVersion: '2010-09-09'
Description: 'Kishax Discord Bot Infrastructure'

Parameters:
  AccountId:
    Type: String
    Description: AWS Account ID
  DiscordToken:
    Type: String
    Description: Discord Bot Token
    NoEcho: true
  DiscordChannelId:
    Type: String
    Description: Discord Channel ID
  DiscordChatChannelId:
    Type: String
    Description: Discord Chat Channel ID
  DiscordAdminChannelId:
    Type: String
    Description: Discord Admin Channel ID
  DiscordRuleChannelId:
    Type: String
    Description: Discord Rule Channel ID
  DiscordRuleMessageId:
    Type: String
    Description: Discord Rule Message ID
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for ECS tasks
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for ECS tasks

Resources:
  # SQS Queue (Main)
  DiscordQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-discord-queue
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DiscordDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: DiscordBot

  # SQS Dead Letter Queue
  DiscordDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: kishax-discord-dlq
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: DiscordBot

  # Parameter Store for secrets
  DiscordTokenParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/token
      Type: String
      Value: !Ref DiscordToken

  DiscordChannelIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/channel-id
      Type: String
      Value: !Ref DiscordChannelId

  DiscordChatChannelIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/chat-channel-id
      Type: String
      Value: !Ref DiscordChatChannelId

  DiscordAdminChannelIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/admin-channel-id
      Type: String
      Value: !Ref DiscordAdminChannelId

  DiscordRuleChannelIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/rule-channel-id
      Type: String
      Value: !Ref DiscordRuleChannelId

  DiscordRuleMessageIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/discord/rule-message-id
      Type: String
      Value: !Ref DiscordRuleMessageId

  SqsQueueUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /kishax/sqs/queue-url
      Type: String
      Value: !Ref DiscordQueue

  # IAM Role for ECS Task Execution
  EcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ParameterStoreAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/kishax/discord/*'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/kishax/sqs/*'

  # IAM Role for ECS Task
  EcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SqsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt DiscordQueue.Arn
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/kishax-discord-bot:*'

  # CloudWatch Log Group
  DiscordBotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/kishax-discord-bot
      RetentionInDays: 30

  # ECS Cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: kishax-cluster

  # Security Group for ECS Tasks
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Kishax Discord Bot ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: kishax-discord-bot-sg
        - Key: Project
          Value: Kishax

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SqsSendMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt DiscordQueue.Arn

  # Lambda Function
  DiscordLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: kishax-discord-lambda
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sqs = new AWS.SQS();
          
          exports.handler = async (event) => {
              console.log('Event:', JSON.stringify(event, null, 2));
              
              try {
                  const requestBody = typeof event.body === 'string' ? JSON.parse(event.body) : event.body || event;
                  
                  const params = {
                      QueueUrl: process.env.SQS_QUEUE_URL,
                      MessageBody: JSON.stringify(requestBody),
                      MessageAttributes: {
                          'messageType': {
                              DataType: 'String',
                              StringValue: requestBody.type || 'unknown'
                          }
                      }
                  };
                  
                  const result = await sqs.sendMessage(params).promise();
                  
                  return {
                      statusCode: 200,
                      body: JSON.stringify({ success: true, messageId: result.MessageId })
                  };
              } catch (error) {
                  console.error('Error:', error);
                  return {
                      statusCode: 500,
                      body: JSON.stringify({ success: false, error: error.message })
                  };
              }
          };
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref DiscordQueue
      Tags:
        - Key: Project
          Value: Kishax
        - Key: Component
          Value: DiscordBot

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: kishax-discord-api
      Description: API Gateway for Kishax Discord Bot
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: discord

  # API Gateway Method
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DiscordLambdaFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DiscordLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/discord'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

Outputs:
  SqsQueueUrl:
    Description: SQS Queue URL
    Value: !Ref DiscordQueue
    Export:
      Name: !Sub '${AWS::StackName}-SqsQueueUrl'

  SqsQueueArn:
    Description: SQS Queue ARN
    Value: !GetAtt DiscordQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SqsQueueArn'

  ApiGatewayUrl:
    Description: API Gateway URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/discord'
    Export:
      Name: !Sub '${AWS::StackName}-ApiGatewayUrl'

  EcsClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt EcsCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EcsClusterArn'

  EcsTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt EcsTaskExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EcsTaskExecutionRoleArn'

  EcsTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt EcsTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EcsTaskRoleArn'

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref EcsSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'